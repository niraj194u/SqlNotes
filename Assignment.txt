
                                   Its my first assiment:
								   =======================

CREATE TABLE sales (
  customer_id VARCHAR(1),
  order_date DATE,
  product_id INTEGER
);

select * from sales
select * from customer_id 

INSERT ALL
  INTO sales (customer_id, order_date, product_id) VALUES ('A', TO_DATE('2021-01-01', 'YYYY-MM-DD'), '1');
  INTO sales (customer_id, order_date, product_id) VALUES ('A', TO_DATE('2021-01-01', 'YYYY-MM-DD'), '2')
  INTO sales (customer_id, order_date, product_id) VALUES ('A', TO_DATE('2021-01-07', 'YYYY-MM-DD'), '2')
  INTO sales (customer_id, order_date, product_id) VALUES ('A', TO_DATE('2021-01-10', 'YYYY-MM-DD'), '3')
  INTO sales (customer_id, order_date, product_id) VALUES ('A', TO_DATE('2021-01-11', 'YYYY-MM-DD'), '3')
  INTO sales (customer_id, order_date, product_id) VALUES ('A', TO_DATE('2021-01-11', 'YYYY-MM-DD'), '3')
  INTO sales (customer_id, order_date, product_id) VALUES ('B', TO_DATE('2021-01-01', 'YYYY-MM-DD'), '2')
  INTO sales (customer_id, order_date, product_id) VALUES ('B', TO_DATE('2021-01-02', 'YYYY-MM-DD'), '2')
  INTO sales (customer_id, order_date, product_id) VALUES ('B', TO_DATE('2021-01-04', 'YYYY-MM-DD'), '1')
  INTO sales (customer_id, order_date, product_id) VALUES ('B', TO_DATE('2021-01-11', 'YYYY-MM-DD'), '1')
  INTO sales (customer_id, order_date, product_id) VALUES ('B', TO_DATE('2021-01-16', 'YYYY-MM-DD'), '3')
  INTO sales (customer_id, order_date, product_id) VALUES ('B', TO_DATE('2021-02-01', 'YYYY-MM-DD'), '3')
  INTO sales (customer_id, order_date, product_id) VALUES ('C', TO_DATE('2021-01-01', 'YYYY-MM-DD'), '3')
  INTO sales (customer_id, order_date, product_id) VALUES ('C', TO_DATE('2021-01-01', 'YYYY-MM-DD'), '3')
  INTO sales (customer_id, order_date, product_id) VALUES ('C', TO_DATE('2021-01-07', 'YYYY-MM-DD'), '3')
  
SELECT * FROM dual;

  
  CREATE TABLE menu (
  product_id INTEGER,
  product_name VARCHAR(5),
  price INTEGER
);
select * from menu

INSERT INTO menu
  (product_id, product_name, price)
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  
INSERT INTO menu (product_id, product_name, price) VALUES ('1', 'sushi', '10');
INSERT INTO menu (product_id, product_name, price) VALUES ('2', 'curry', '15');
INSERT INTO menu (product_id, product_name, price) VALUES ('3', 'ramen', '12');



CREATE TABLE members (
  customer_id VARCHAR(1),
  join_date DATE
);

select* from members

INSERT INTO members (customer_id, join_date) VALUES ('A', TO_DATE('2021-01-07', 'YYYY-MM-DD'));
INSERT INTO members (customer_id, join_date) VALUES ('B', TO_DATE('2021-01-09', 'YYYY-MM-DD'));

--1. What is the total amount each customer spent at the restaurant?

SELECT 
    s.customer_id, 
    SUM(m.price) AS total_amount_spent
FROM 
    sales s
JOIN 
    menu m
ON 
    s.product_id = m.product_id
GROUP BY 
    s.customer_id
ORDER BY 
    s.customer_id;
    
  
  
 --2. How many days has each customer visited the restaurant?
 
    SELECT 
    customer_id, 
    COUNT(DISTINCT order_date) AS days_visited
FROM 
    sales
GROUP BY 
    customer_id
ORDER BY 
    customer_id;



--3. What was the first item from the menu purchased by each customer?

WITH FirstPurchase AS (
    SELECT 
        customer_id, 
        MIN(order_date) AS first_purchase_date
    FROM 
        sales
    GROUP BY 
        customer_id
)
SELECT 
    s.customer_id, 
    m.product_name AS first_item_purchased,
    fp.first_purchase_date
FROM 
    FirstPurchase fp
JOIN 
    sales s
ON 
   -- fp.customer_id = s.customer_id AND fp.first_purchase_date = s.order_date
JOIN 
    menu m
ON 
    s.product_id = m.product_id
ORDER BY 
    s.customer_id;




-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?

SELECT 
    m.product_name, 
    COUNT(s.product_id) AS purchase_count
FROM 
    sales s
JOIN 
    menu m
ON 
    s.product_id = m.product_id
GROUP BY 
    m.product_name
ORDER BY 
    purchase_count DESC
    
    
    
--5. Which item was the most popular for each customer?
    
    WITH CustomerItemCount AS (
    SELECT 
        customer_id,
        product_id,
        COUNT(*) AS purchase_count
    FROM 
        sales
    GROUP BY 
        customer_id, product_id
)
SELECT 
    cic.customer_id,
    m.product_name,
    cic.purchase_count
FROM 
    CustomerItemCount cic
JOIN 
    menu m
ON 
    cic.product_id = m.product_id
WHERE 
    (cic.customer_id, cic.purchase_count) IN (
        SELECT 
            customer_id, 
            MAX(purchase_count) AS max_purchase_count
        FROM 
            CustomerItemCount
        GROUP BY 
            customer_id
    )
ORDER BY 
    cic.customer_id;
    
    
-- 6. Which item was purchased first by the customer after they became a member? 
    
    WITH CustomerFirstPurchaseAfterJoin AS (
    SELECT 
        s.customer_id,
        s.product_id,
        s.order_date,
        m.join_date,
        ROW_NUMBER() OVER (PARTITION BY s.customer_id ORDER BY s.order_date) AS purchase_rank
    FROM 
        sales s
    JOIN 
        members m
    ON 
        s.customer_id = m.customer_id
    WHERE 
        s.order_date > m.join_date
)
SELECT 
    cfp.customer_id,
    m.product_name,
    cfp.order_date AS first_purchase_date
FROM 
    CustomerFirstPurchaseAfterJoin cfp
JOIN 
    menu m
ON 
    cfp.product_id = m.product_id
WHERE 
    cfp.purchase_rank = 1
ORDER BY 
    cfp.customer_id;


    
-- 7. Which item was purchased just before the customer became a member?  
    
WITH CustomerLastPurchaseBeforeJoin AS (
    SELECT 
        s.customer_id,
        s.product_id,
        s.order_date,
        m.join_date,
        ROW_NUMBER() OVER (PARTITION BY s.customer_id ORDER BY s.order_date DESC) AS purchase_rank
    FROM 
        sales s
    JOIN 
        members m
    ON 
        s.customer_id = m.customer_id
    WHERE 
        s.order_date < m.join_date
)
SELECT 
    clp.customer_id,
    m.product_name,
    clp.order_date AS last_purchase_date
FROM 
    CustomerLastPurchaseBeforeJoin clp
JOIN 
    menu m
ON 
    clp.product_id = m.product_id
WHERE 
    clp.purchase_rank = 1
ORDER BY 
    clp.customer_id;

-- 8. What is the total items and amount spent for each member before they became a member?   
    
SELECT 
    m.customer_id,
    COUNT(s.product_id) AS total_items,
    SUM(menu.price) AS total_amount_spent
FROM 
    sales s
JOIN 
    members m
ON 
    s.customer_id = m.customer_id
JOIN 
    menu
ON 
    s.product_id = menu.product_id
WHERE 
    s.order_date < m.join_date  -- Filter for purchases before the join date
GROUP BY 
    m.customer_id
ORDER BY 
    m.customer_id;


-- 9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
SELECT 
    m.customer_id,
    SUM(
        CASE 
            WHEN menu.product_name = 'sushi' THEN menu.price * 2 * 10  -- 2x multiplier for sushi
            ELSE menu.price * 10  -- Standard 10 points per $1 spent
        END
    ) AS total_points
FROM 
    sales s
JOIN 
    members m
ON 
    s.customer_id = m.customer_id
JOIN 
    menu
ON 
    s.product_id = menu.product_id
GROUP BY 
    m.customer_id
ORDER BY 
    m.customer_id;



-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
SELECT 
    m.customer_id,
    SUM(
        CASE 
            -- Apply 2x multiplier for the first week after joining
            WHEN s.order_date BETWEEN m.join_date AND m.join_date + INTERVAL '6' DAY THEN menu.price * 2 * 10
            -- Standard points (10 points per dollar spent) for purchases after the first week
            ELSE menu.price * 10
        END
    ) AS total_points
FROM 
    sales s
JOIN 
    members m
ON 
    s.customer_id = m.customer_id
JOIN 
    menu
ON 
    s.product_id = menu.product_id
WHERE
    s.order_date <= TO_DATE('2021-01-31', 'YYYY-MM-DD') -- Use TO_DATE() to specify the date format
    AND m.customer_id IN ('A', 'B') -- Focus on customer A and customer B
GROUP BY 
    m.customer_id
ORDER BY 
    m.customer_id;

 